/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request'
import http from 'http'

/* tslint:disable:no-unused-locals */
import { BatchJournalRequest } from '../model/batchJournalRequest'
import { BatchJournalResponse } from '../model/batchJournalResponse'
import { JournalData } from '../model/journalData'
import { JournalResource } from '../model/journalResource'

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models'
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models'

import { HttpError, RequestFile } from './apis'

const defaultBasePath = 'https://broker-api.sandbox.alpaca.markets/v1'

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum JournalsApiApiKeys {}

export class JournalsApi {
  protected _basePath = defaultBasePath
  protected _defaultHeaders: any = {}
  protected _useQuerystring = false

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    BasicAuth: new HttpBasicAuth()
  }

  protected interceptors: Interceptor[] = []

  constructor(basePath?: string)
  constructor(username: string, password: string, basePath?: string)
  constructor(basePathOrUsername: string, password?: string, basePath?: string) {
    if (password) {
      this.username = basePathOrUsername
      this.password = password
      if (basePath) {
        this.basePath = basePath
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value
  }

  set basePath(basePath: string) {
    this._basePath = basePath
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders
  }

  get defaultHeaders() {
    return this._defaultHeaders
  }

  get basePath() {
    return this._basePath
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth
  }

  public setApiKey(key: JournalsApiApiKeys, value: string) {
    ;(this.authentications as any)[JournalsApiApiKeys[key]].apiKey = value
  }

  set username(username: string) {
    this.authentications.BasicAuth.username = username
  }

  set password(password: string) {
    this.authentications.BasicAuth.password = password
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor)
  }

  /**
   * You can cancel journals while they are in the pending status. An attempt to cancel already-executed journals will return an error.
   * @summary Cancel a pending journal.
   * @param journalId
   */
  public async deleteJournal(
    journalId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath + '/journals/{journal_id}'.replace('{' + 'journal_id' + '}', encodeURIComponent(String(journalId)))
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const localVarFormParams: any = {}

    // verify required parameter 'journalId' is not null or undefined
    if (journalId === null || journalId === undefined) {
      throw new Error('Required parameter journalId was null or undefined when calling deleteJournal.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Return a list of requested journals.
   * @param after by settle_date
   * @param before by settle_date
   * @param status
   * @param entryType
   * @param toAccount
   * @param fromAccount
   */
  public async getJournals(
    after?: string,
    before?: string,
    status?: 'pending' | 'canceled' | 'executed',
    entryType?: 'JNLC' | 'JNLS',
    toAccount?: string,
    fromAccount?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<JournalResource> }> {
    const localVarPath = this.basePath + '/journals'
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    if (after !== undefined) {
      localVarQueryParameters['after'] = ObjectSerializer.serialize(after, 'string')
    }

    if (before !== undefined) {
      localVarQueryParameters['before'] = ObjectSerializer.serialize(before, 'string')
    }

    if (status !== undefined) {
      localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "'pending' | 'canceled' | 'executed'")
    }

    if (entryType !== undefined) {
      localVarQueryParameters['entry_type'] = ObjectSerializer.serialize(entryType, "'JNLC' | 'JNLS'")
    }

    if (toAccount !== undefined) {
      localVarQueryParameters['to_account'] = ObjectSerializer.serialize(toAccount, 'string')
    }

    if (fromAccount !== undefined) {
      localVarQueryParameters['from_account'] = ObjectSerializer.serialize(fromAccount, 'string')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<JournalResource> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'Array<JournalResource>')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   * A journal can be JNLC (move cash) or JNLS (move shares), dictated by `entry_type`. Generally, journal requests are subject to approval and starts from the `pending` status. The status changes are propagated through the Event API. Under certain conditions agreed for the partner, such journal transactions that meet the criteria are executed right away.
   * @summary Request a journal.
   * @param journalData
   */
  public async postJournals(
    journalData: JournalData,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: JournalResource }> {
    const localVarPath = this.basePath + '/journals'
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    // verify required parameter 'journalData' is not null or undefined
    if (journalData === null || journalData === undefined) {
      throw new Error('Required parameter journalData was null or undefined when calling postJournals.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(journalData, 'JournalData')
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: JournalResource }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'JournalResource')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Create a batch journal
   * @param batchJournalRequest
   */
  public async postJournalsBatch(
    batchJournalRequest: BatchJournalRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<BatchJournalResponse> }> {
    const localVarPath = this.basePath + '/journals/batch'
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    // verify required parameter 'batchJournalRequest' is not null or undefined
    if (batchJournalRequest === null || batchJournalRequest === undefined) {
      throw new Error('Required parameter batchJournalRequest was null or undefined when calling postJournalsBatch.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(batchJournalRequest, 'BatchJournalRequest')
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<BatchJournalResponse> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'Array<BatchJournalResponse>')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
}
