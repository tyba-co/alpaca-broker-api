/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request'
import http from 'http'

/* tslint:disable:no-unused-locals */
import { Account } from '../model/account'
import { AccountCreationObject } from '../model/accountCreationObject'
import { AccountExtended } from '../model/accountExtended'
import { AccountUpdate } from '../model/accountUpdate'
import { ActivityItem } from '../model/activityItem'
import { InlineResponse200 } from '../model/inlineResponse200'

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models'
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models'

import { HttpError, RequestFile } from './apis'

const defaultBasePath = 'https://broker-api.sandbox.alpaca.markets/v1'

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AccountsApiApiKeys {}

export class AccountsApi {
  protected _basePath = defaultBasePath
  protected _defaultHeaders: any = {}
  protected _useQuerystring = false

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    BasicAuth: new HttpBasicAuth()
  }

  protected interceptors: Interceptor[] = []

  constructor(basePath?: string)
  constructor(username: string, password: string, basePath?: string)
  constructor(basePathOrUsername: string, password?: string, basePath?: string) {
    if (password) {
      this.username = basePathOrUsername
      this.password = password
      if (basePath) {
        this.basePath = basePath
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value
  }

  set basePath(basePath: string) {
    this._basePath = basePath
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders
  }

  get defaultHeaders() {
    return this._defaultHeaders
  }

  get basePath() {
    return this._basePath
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth
  }

  public setApiKey(key: AccountsApiApiKeys, value: string) {
    ;(this.authentications as any)[AccountsApiApiKeys[key]].apiKey = value
  }

  set username(username: string) {
    this.authentications.BasicAuth.username = username
  }

  set password(password: string) {
    this.authentications.BasicAuth.password = password
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor)
  }

  /**
   *
   * @summary Request to close an account
   * @param accountId Account identifier.
   */
  public async deleteAccount(
    accountId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath + '/accounts/{account_id}'.replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const localVarFormParams: any = {}

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling deleteAccount.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   * The response is an Account model.
   * @summary Retrieve an account.
   * @param accountId Account identifier.
   */
  public async getAccount(
    accountId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: AccountExtended }> {
    const localVarPath =
      this.basePath + '/accounts/{account_id}'.replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getAccount.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: AccountExtended }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'AccountExtended')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Retrieve account activities
   * @param date
   * @param until
   * @param after
   * @param direction
   * @param accountId
   * @param pageSize
   * @param pageToken
   */
  public async getAccountActivities(
    date?: string,
    until?: string,
    after?: string,
    direction?: 'asc' | 'desc',
    accountId?: string,
    pageSize?: number,
    pageToken?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<ActivityItem> }> {
    const localVarPath = this.basePath + '/accounts/activities'
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    if (date !== undefined) {
      localVarQueryParameters['date'] = ObjectSerializer.serialize(date, 'string')
    }

    if (until !== undefined) {
      localVarQueryParameters['until'] = ObjectSerializer.serialize(until, 'string')
    }

    if (after !== undefined) {
      localVarQueryParameters['after'] = ObjectSerializer.serialize(after, 'string')
    }

    if (direction !== undefined) {
      localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "'asc' | 'desc'")
    }

    if (accountId !== undefined) {
      localVarQueryParameters['account_id'] = ObjectSerializer.serialize(accountId, 'string')
    }

    if (pageSize !== undefined) {
      localVarQueryParameters['page_size'] = ObjectSerializer.serialize(pageSize, 'number')
    }

    if (pageToken !== undefined) {
      localVarQueryParameters['page_token'] = ObjectSerializer.serialize(pageToken, 'string')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<ActivityItem> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'Array<ActivityItem>')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Retrieve specific account activities
   * @param activityType
   * @param date
   * @param until
   * @param after
   * @param direction
   * @param accountId
   * @param pageSize
   * @param pageToken
   */
  public async getAccountActivitiesByType(
    activityType:
      | 'FILL'
      | 'ACATC'
      | 'ACATS'
      | 'CSD'
      | 'CSR'
      | 'CSW'
      | 'DIV'
      | 'DIVCGL'
      | 'DIVCGS'
      | 'DIVNRA'
      | 'DIVROC'
      | 'DIVTXEX'
      | 'INT'
      | 'JNLC'
      | 'JNLS'
      | 'MA'
      | 'NC'
      | 'PTC'
      | 'REORG'
      | 'SSO'
      | 'SSP',
    date?: string,
    until?: string,
    after?: string,
    direction?: 'asc' | 'desc',
    accountId?: string,
    pageSize?: number,
    pageToken?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<ActivityItem> }> {
    const localVarPath =
      this.basePath +
      '/accounts/activities/{activity_type}'.replace(
        '{' + 'activity_type' + '}',
        encodeURIComponent(String(activityType))
      )
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    // verify required parameter 'activityType' is not null or undefined
    if (activityType === null || activityType === undefined) {
      throw new Error('Required parameter activityType was null or undefined when calling getAccountActivitiesByType.')
    }

    if (date !== undefined) {
      localVarQueryParameters['date'] = ObjectSerializer.serialize(date, 'string')
    }

    if (until !== undefined) {
      localVarQueryParameters['until'] = ObjectSerializer.serialize(until, 'string')
    }

    if (after !== undefined) {
      localVarQueryParameters['after'] = ObjectSerializer.serialize(after, 'string')
    }

    if (direction !== undefined) {
      localVarQueryParameters['direction'] = ObjectSerializer.serialize(direction, "'asc' | 'desc'")
    }

    if (accountId !== undefined) {
      localVarQueryParameters['account_id'] = ObjectSerializer.serialize(accountId, 'string')
    }

    if (pageSize !== undefined) {
      localVarQueryParameters['page_size'] = ObjectSerializer.serialize(pageSize, 'number')
    }

    if (pageToken !== undefined) {
      localVarQueryParameters['page_token'] = ObjectSerializer.serialize(pageToken, 'string')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<ActivityItem> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'Array<ActivityItem>')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Retrieve all accounts
   * @param query The query supports partial match of account number, names, emails, etc.. Items can be space delimited.
   */
  public async getAccounts(
    query?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<Account> }> {
    const localVarPath = this.basePath + '/accounts'
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    if (query !== undefined) {
      localVarQueryParameters['query'] = ObjectSerializer.serialize(query, 'string')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<Account> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'Array<Account>')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   * The response is a Trading Account model.
   * @summary Retrieve trading details for an account.
   * @param accountId Account identifier.
   */
  public async getTradingAccount(
    accountId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: InlineResponse200 }> {
    const localVarPath =
      this.basePath +
      '/trading/accounts/{account_id}/account'.replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getTradingAccount.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: InlineResponse200 }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'InlineResponse200')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Update an account
   * @param accountId Account identifier.
   * @param accountUpdate
   */
  public async patchAccount(
    accountId: string,
    accountUpdate: AccountUpdate,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Account }> {
    const localVarPath =
      this.basePath + '/accounts/{account_id}'.replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling patchAccount.')
    }

    // verify required parameter 'accountUpdate' is not null or undefined
    if (accountUpdate === null || accountUpdate === undefined) {
      throw new Error('Required parameter accountUpdate was null or undefined when calling patchAccount.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'PATCH',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(accountUpdate, 'AccountUpdate')
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Account }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'Account')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Create an account
   * @param accountCreationObject
   */
  public async postAccount(
    accountCreationObject: AccountCreationObject,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Account }> {
    const localVarPath = this.basePath + '/accounts'
    const localVarQueryParameters: any = {}
    const localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders)
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    const localVarFormParams: any = {}

    // verify required parameter 'accountCreationObject' is not null or undefined
    if (accountCreationObject === null || accountCreationObject === undefined) {
      throw new Error('Required parameter accountCreationObject was null or undefined when calling postAccount.')
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    const localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(accountCreationObject, 'AccountCreationObject')
    }

    let authenticationPromise = Promise.resolve()
    if (this.authentications.BasicAuth.username && this.authentications.BasicAuth.password) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      )
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions))
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Account }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          console.debug({error, response, body})
          if (error) {
            reject(error)
          } else {
            body = ObjectSerializer.deserialize(body, 'Account')
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
}
